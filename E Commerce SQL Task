-- Create Database and Tables
CREATE DATABASE ecommerce;
USE ecommerce;

CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    address VARCHAR(255)
);

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10, 2),
    description TEXT
);

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

-- Insert Sample Data
INSERT INTO customers (name, email, address) VALUES
('John Doe', 'john@example.com', '123 Main St'),
('Jane Smith', 'jane@example.com', '456 Maple Ave'),
('Alice Brown', 'alice@example.com', '789 Oak Rd');

INSERT INTO products (name, price, description) VALUES
('Product A', 50.00, 'Description for Product A'),
('Product B', 100.00, 'Description for Product B'),
('Product C', 40.00, 'Description for Product C'),
('Product D', 200.00, 'Description for Product D');

INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, CURDATE(), 150.00),
(2, DATE_SUB(CURDATE(), INTERVAL 10 DAY), 250.00),
(3, DATE_SUB(CURDATE(), INTERVAL 40 DAY), 80.00);

-- Retrieve all customers who have placed an order in the last 30 days
SELECT DISTINCT c.*
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Get the total amount of all orders placed by each customer
SELECT c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id;

-- Update the price of Product C to 45.00
UPDATE products
SET price = 45.00
WHERE name = 'Product C';

-- Add a new column discount to the products table
ALTER TABLE products
ADD COLUMN discount DECIMAL(5,2) DEFAULT 0.00;

-- Retrieve the top 3 products with the highest price
SELECT * FROM products
ORDER BY price DESC
LIMIT 3;

-- Normalize the database: create order_items table
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- Insert sample order items
INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 2, 50.00),
(2, 2, 1, 100.00),
(2, 4, 1, 200.00),
(3, 3, 2, 40.00);

-- Get the names of customers who have ordered Product A
SELECT DISTINCT c.name
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE p.name = 'Product A';

-- Join orders and customers to retrieve customer's name and order date
SELECT o.id AS order_id, c.name AS customer_name, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.id;

-- Retrieve the orders with a total amount greater than 150.00
SELECT * FROM orders
WHERE total_amount > 150.00;

-- Retrieve the average total of all orders
SELECT AVG(total_amount) AS average_order_value
FROM orders;
